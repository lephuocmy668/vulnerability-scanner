// This is a package for interacting with GitHub API and implementing the
// SourceCodeRepository interface from the domain package. It provides
// methods for retrieving file metadata and content from a GitHub repository.
package github

import (
	"context"
	"strings"

	githublib "github.com/google/go-github/github"
	"github.com/lephuocmy668/vulnerability-scanner/domain"
)

// githubRepository defines a githubRepository struct with a client field
// of type *githublib.Client, which is used to make requests to the GitHub API
type githubRepository struct {
	client *githublib.Client
}

// NewSourceCodeRepository returns an instance of githubRepository as a
// SourceCodeRepository interface.
func NewSourceCodeRepository(githubClient *githublib.Client) domain.SourceCodeRepository {
	return &githubRepository{
		client: githubClient,
	}
}

// GetContents can return either the metadata of a single file or
// the metadata of all the files or subdirectories of a directory
func (g *githubRepository) GetContents(ctx context.Context, owner, repo, path string) (result []domain.GitContent, er error) {
	_, contents, _, err := g.client.Repositories.GetContents(ctx, owner, repo, path, nil)
	if err != nil {
		return nil, err
	}

	for _, item := range contents {
		result = append(result, domain.GitContent{
			Type: *item.Type,
			Path: *item.Path,
		})
	}

	return result, err
}

// GetContent returns the content of the file
func (g *githubRepository) GetContent(ctx context.Context, owner, repo, path string) (result *string, err error) {
	file, _, _, err := g.client.Repositories.GetContents(ctx, owner, repo, path, nil)
	if err != nil {
		return nil, err
	}

	content, err := file.GetContent()
	if err != nil {
		// ignore unsupported content encoding
		if strings.Contains(err.Error(), "unsupported content encoding") {
			content = ""
			return &content, nil
		}
		return
	}

	return &content, nil
}
