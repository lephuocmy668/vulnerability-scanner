package postgres

import (
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Migration represents the migration runner
type Migration struct {
	datasource *Datasource
	logger     log.Logger
}

// NewMigration returns new instance of Migration
func NewMigration(datasource *Datasource, logger log.Logger) *Migration {
	return &Migration{
		datasource: datasource,
		logger:     logger,
	}
}

// Run runs migration
func (m *Migration) Run() error {
	source := m.datasource.AsMigrationFileSource()
	url := m.datasource.AsDatasourceString()
	m.logger.Log(
		"message", "running migration",
		"source", source,
	)

	migrations, err := migrate.New("file://migrations", url)
	if err != nil {
		level.Error(m.logger).Log(
			"message", "create new migration failed",
			"error", err.Error(),
			"source", source,
		)
		return err
	}

	if err = migrations.Up(); err != nil {
		if err.Error() != "no change" {
			level.Error(m.logger).Log(
				"message", "execute migration failed",
				"error", err.Error(),
				"source", source,
			)
			return err
		}
	}
	return nil
}
