package postgres

import (
	"time"

	"github.com/lephuocmy668/vulnerability-scanner/domain"
)

// ScanningTask is read model for scanning item.
type ScanningTask struct {
	ID             string          `gorm:"primary_key"`
	Status         string          `json:"status"`
	RepositoryName string          `json:"repository_name"`
	RepositoryURL  string          `json:"repository_url"`
	Findings       []Vulnerability `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;" json:"findings"`
	Error          string          `json:"error"`
	CreatedAt      *time.Time
	CompletedAt    *time.Time
	UpdatedAt      *time.Time
	StartedAt      *time.Time
	DeletedAt      *time.Time `sql:"index"`
}

// initScanningTaskFromDomainScanningTask is used to convert domain.ScanningTask to ScanningTask(DAL model) struct.
func initScanningTaskFromDomainScanningTask(task domain.ScanningTask) ScanningTask {
	return ScanningTask{
		ID:             task.ID,
		Status:         task.Status,
		RepositoryName: task.RepositoryName,
		RepositoryURL:  task.RepositoryURL,
		Error:          task.Error,
		CreatedAt:      task.CreatedAt,
	}
}

// toDomainScanningTask method is used to convert ScanningTask struct to domain.ScanningTask.
func (task *ScanningTask) toDomainScanningTask() *domain.ScanningTask {

	var findings []domain.Vulnerability
	for _, item := range task.Findings {
		findings = append(findings, item.toDomainVulnerability())
	}

	return &domain.ScanningTask{
		ID:             task.ID,
		Status:         task.Status,
		RepositoryName: task.RepositoryName,
		RepositoryURL:  task.RepositoryURL,
		Findings:       findings,
		CreatedAt:      task.CreatedAt,
		StartedAt:      task.StartedAt,
		CompletedAt:    task.CompletedAt,
		Error:          task.Error,
	}
}

// TableName sets tablename (GORM)
func (ScanningTask) TableName() string {
	return "scanning_tasks"
}

// Vulnerability is read model for a vulnerability
type Vulnerability struct {
	ID                    string                `gorm:"primary_key"`
	ScanningTaskID        string                `json:"-"`
	Type                  string                `json:"type"`
	RuleID                string                `json:"rule_id"`
	Location              FileLocation          `gorm:"embedded;embeddedPrefix:location_" json:"location"`
	VulnerabilityMetadata VulnerabilityMetadata `gorm:"embedded;embeddedPrefix:metadata_" json:"metadata"`
	CreatedAt             time.Time
	UpdatedAt             time.Time
	DeletedAt             *time.Time `sql:"index"`
}

// toDomainVulnerability method is used to convert Vulnerability struct to domain.Vulnerability.
func (v *Vulnerability) toDomainVulnerability() domain.Vulnerability {
	return domain.Vulnerability{
		Type:     v.Type,
		RuleID:   v.RuleID,
		Location: v.Location.toDomainFileLocation(),
		Metadata: v.VulnerabilityMetadata.toDomainVulnerabilityMetadata(),
	}
}

// TableName sets tablename (GORM)
func (Vulnerability) TableName() string {
	return "vulnerabilities"
}

// VulnerabilityMetadata is read model for vulnerability metadata
type VulnerabilityMetadata struct {
	ID          string `gorm:"primary_key"`
	Description string `json:"description"`
	Severity    string `json:"severity"`
}

// toDomainVulnerabilityMetadata method is used to convert Vulnerability struct to domain.Vulnerability.
func (v *VulnerabilityMetadata) toDomainVulnerabilityMetadata() domain.VulnerabilityMetadata {
	return domain.VulnerabilityMetadata{
		Description: v.Description,
		Severity:    v.Severity,
	}
}

// FileLocation points out the file location of the vulnerability
type FileLocation struct {
	ID    string            `gorm:"primary_key"`
	Path  string            `json:"path" gorm:"file_path"`
	Begin FileLocationPoint `gorm:"embedded;embeddedPrefix:begin_" json:"begin"`
}

// toDomainFileLocation method is used to convert FileLocation struct to domain.FileLocation.
func (f *FileLocation) toDomainFileLocation() domain.FileLocation {
	return domain.FileLocation{
		Path:  f.Path,
		Begin: f.Begin.toDomainFileLocationPoint(),
	}
}

// FileLocationPoint indicates the starting point or ending point in the file
type FileLocationPoint struct {
	ID   string `gorm:"primary_key"`
	Line int    `json:"line"`
}

// toDomainFileLocationPoint method is used to convert FileLocationPoint struct to domain.FileLocationPoint
func (f *FileLocationPoint) toDomainFileLocationPoint() domain.FileLocationPoint {
	return domain.FileLocationPoint{
		Line: f.Line,
	}
}
