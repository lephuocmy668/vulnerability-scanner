package postgres

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

// Datasource defines a struct that stores the
// necessary information to connect to a Postgres database
type Datasource struct {
	Type       string
	Host       string
	Port       int
	Database   string
	Username   string
	Password   string
	SSLMode    string
	Migrations string
}

// AsDatasourceString returns the Postgres connection string
// based on the datasource information
func (d *Datasource) AsDatasourceString() string {
	return fmt.Sprintf("postgres://postgres:%s@%s:%d/%s?&sslmode=%s", d.Password, d.Host, d.Port, d.Database, d.SSLMode)
}

// AsMigrationFileSource returns the source file path for the database migrations
func (d *Datasource) AsMigrationFileSource() string {
	return fmt.Sprintf("file://%s", d.Migrations)
}

// AsPQString returns a string with the connection parameters
// in the format required by lib/pq package
func (d *Datasource) AsPQString() string {
	return fmt.Sprintf("dbname=%s user=%s password=%s host=%s port=%d sslmode=%s",
		d.Database,
		d.Username,
		d.Password,
		d.Host,
		d.Port,
		d.SSLMode)
}

// NewGormDB creates a new GORM database instance connected
// to the Postgres datasource specified.
func NewGormDB(datasource *Datasource) *gorm.DB {
	db, err := gorm.Open("postgres", datasource.AsPQString())
	if err != nil {
		panic("Connect to Postgres failed: " + err.Error())
	}
	return db
}
