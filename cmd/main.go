package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"syscall"

	kitprometheus "github.com/go-kit/kit/metrics/prometheus"
	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
	githubLib "github.com/google/go-github/github"
	"github.com/joho/godotenv"
	domain "github.com/lephuocmy668/vulnerability-scanner/domain"
	"github.com/lephuocmy668/vulnerability-scanner/domain/rules"
	natsLib "github.com/nats-io/nats.go"
	"golang.org/x/oauth2"

	httptransport "github.com/lephuocmy668/vulnerability-scanner/transport/http"
	natstransport "github.com/lephuocmy668/vulnerability-scanner/transport/nats"

	middleware "github.com/lephuocmy668/vulnerability-scanner/helper/middleware"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	"github.com/lephuocmy668/vulnerability-scanner/infrastructure/github"
	"github.com/lephuocmy668/vulnerability-scanner/infrastructure/nats"
	postgres "github.com/lephuocmy668/vulnerability-scanner/infrastructure/postgres"
	_ "github.com/lib/pq"
)

// Setup rule list
var hardcodedSecretRule domain.Rule = rules.NewHardcodedSecret("G101")
var ruleList = []domain.Rule{hardcodedSecretRule}

func main() {
	// Setup logger
	logger := log.NewJSONLogger(log.NewSyncWriter(os.Stdout))
	logger = log.With(logger, "ts", log.DefaultTimestampUTC, "caller", log.DefaultCaller)

	// Setup Prometheus metrics
	fieldKeys := []string{"method", "error"}
	requestCount := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "request_count",
		Help:      "Number of requests received.",
	}, fieldKeys)
	requestLatency := kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "request_latency_microseconds",
		Help:      "Total duration of requests in microseconds.",
	}, fieldKeys)
	countResult := kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "count_result",
		Help:      "The result of each count method.",
	}, []string{}) // no fields here

	// Load env variable from .env file
	if err := godotenv.Load(); err != nil {
		level.Error(logger).Log(
			"message", "Error loading .env file",
			"error", err.Error(),
		)
	}

	// Setup data source
	portStr := os.Getenv("DB_PORT")
	port, err := strconv.Atoi(portStr)
	if err != nil {
		level.Error(logger).Log(
			"message", "Failed to convert DB_PORT to integer",
			"error", err.Error(),
		)
		panic(err.Error())
	}
	dataSource := &postgres.Datasource{
		Type:       "postgres",
		Host:       os.Getenv("DB_HOST"),
		Port:       port,
		Database:   os.Getenv("DB_NAME"),
		Username:   os.Getenv("DB_USERNAME"),
		Password:   os.Getenv("DB_PASSWORD"),
		SSLMode:    "disable",
		Migrations: "db/migrations",
	}

	// Run migrations
	migration := postgres.NewMigration(dataSource, logger)
	if err := migration.Run(); err != nil {
		level.Error(logger).Log(
			"message", "run migration failed",
			"error", err.Error(),
		)
		panic(err.Error())
	}

	// Setup repository
	db := postgres.NewGormDB(dataSource)
	db.LogMode(true)
	taskRepo := postgres.NewTaskRepository(db)

	// Setup Github API client
	ctx := context.Background()
	var githubToken string
	if githubToken = os.Getenv("GITHUB_ACCESS_TOKEN"); githubToken == "" {
		err := errors.New("GITHUB_ACCESS_TOKEN environment variable is missing")
		level.Error(logger).Log(
			"message", err.Error(),
			"error", err.Error(),
		)
		panic(err.Error())
	}
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: githubToken},
	)
	tc := oauth2.NewClient(ctx, ts)
	githubClient := githubLib.NewClient(tc)

	// Setup source code repository
	var sourceCodeRepository domain.SourceCodeRepository
	sourceCodeRepository = github.NewSourceCodeRepository(githubClient)

	// Setup message queue publisher
	var publisher domain.Publisher
	natsURL := os.Getenv("NATS_URL")
	if natsURL == "" {
		natsURL = natsLib.DefaultURL
	}
	nc, err := natsLib.Connect(natsURL)
	if err != nil {
		level.Error(logger).Log(
			"message", "connect to nats failed",
			"error", err.Error(),
		)
		panic(err.Error())
	}
	publisher = nats.NewPublisher(nc)

	// Setup scanner service
	var svc domain.ScannerService
	svc = domain.NewService(taskRepo, logger, sourceCodeRepository, publisher, ruleList)
	svc = middleware.MakeLoggingMiddleware(logger, svc)
	svc = middleware.MakeInstrumentingMiddleware(requestCount, requestLatency, countResult, svc)

	// Setup message queue consumer
	consumer := natstransport.MakeTaskConsumer(svc, logger)
	uSub, err := nc.QueueSubscribe(domain.ScanningTaskCreatedTopic, domain.ScannerWorkerGroup, consumer.ServeMsg(nc))
	if err != nil {
		level.Error(logger).Log(
			"message", "start consume message failed",
			"error", err.Error(),
		)
		panic(err.Error())
	}
	defer uSub.Unsubscribe()

	// Setup HTTP server
	mux := http.NewServeMux()
	mux.Handle("/vulnerability-scanner/v1/", httptransport.MakeHandler(svc, logger))
	http.Handle("/", accessControl(mux))
	http.Handle("/metrics", promhttp.Handler())

	errs := make(chan error, 2)
	go func() {
		logger.Log("transport", "http", "address", ":8080", "msg", "listening")
		errs <- http.ListenAndServe(":8080", nil)
	}()
	go func() {
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGINT)
		errs <- fmt.Errorf("%s", <-c)
	}()

	logger.Log("terminated", <-errs)
}

func accessControl(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type")

		if r.Method == "OPTIONS" {
			return
		}

		h.ServeHTTP(w, r)
	})
}
