// this file implements the instrumenting middleware which collects metrics about the service endpoints
package middleware

import (
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
	domain "github.com/lephuocmy668/vulnerability-scanner/domain"
)

// instrumentingMiddleware contains three metrics objects and a reference to the next ScannerService.
// The metrics objects are used to count the number of requests, the duration of the requests, and the count of results.
type instrumentingMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.Histogram
	countResult    metrics.Histogram
	next           domain.ScannerService
}

// MakeInstrumentingMiddleware instantiates a new middleware object. The middleware implements the
// ScannerService interface and passes calls to the next ScannerService implementation. It captures
// and logs the duration of the call and increments counters for the number of requests and their duration
func MakeInstrumentingMiddleware(requestCount metrics.Counter, requestLatency metrics.Histogram, countResult metrics.Histogram, next domain.ScannerService) domain.ScannerService {
	return instrumentingMiddleware{
		requestCount:   requestCount,
		requestLatency: requestLatency,
		countResult:    countResult,
		next:           next,
	}
}

// GetTasks ...
func (mw instrumentingMiddleware) GetTasks(request domain.GetTasksRequest) (output []domain.ScanningTask, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "GetTasks", "error", fmt.Sprint(err != nil)}
		mw.requestCount.With(lvs...).Add(1)
		mw.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())

	output, err = mw.next.GetTasks(request)
	return
}

// GetTaskDetail ...
func (mw instrumentingMiddleware) GetTaskDetail(id string) (output *domain.ScanningTask, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "GetTaskDetail", "error", fmt.Sprint(err != nil)}
		mw.requestCount.With(lvs...).Add(1)
		mw.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())

	output, err = mw.next.GetTaskDetail(id)
	return
}

// CreateTask ...
func (mw instrumentingMiddleware) CreateTask(request domain.CreateTaskRequest) (output *domain.ScanningTask, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "CreateTask", "error", fmt.Sprint(err != nil)}
		mw.requestCount.With(lvs...).Add(1)
		mw.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())

	output, err = mw.next.CreateTask(request)
	return
}

// Scan ...
func (mw instrumentingMiddleware) Scan(taskID string, ctx context.Context) (output *domain.ScanningTask, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "Scan", "error", fmt.Sprint(err != nil)}
		mw.requestCount.With(lvs...).Add(1)
		mw.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())

	output, err = mw.next.Scan(taskID, ctx)
	return
}
