package utils

import (
	"fmt"
	"net/url"
	"regexp"
	"strings"
)

func IsValidUUID(uuid string) bool {
	r := regexp.MustCompile("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$")
	return r.MatchString(uuid)
}

func ExtractOwnerAndRepoFromGithubURL(url string) (string, string, error) {
	urlParts := strings.Split(strings.TrimSuffix(url, "/"), "/")
	if len(urlParts) < 2 {
		return "", "", fmt.Errorf("Invalid GitHub URL: %s", url)
	}
	owner := urlParts[len(urlParts)-2]
	repo := urlParts[len(urlParts)-1]
	return owner, repo, nil
}

func IsValidGitHubRepoURL(repoURL string) bool {
	// Parse the URL
	u, err := url.Parse(repoURL)
	if err != nil {
		return false
	}

	// Ensure the URL scheme is "https"
	if u.Scheme != "https" {
		return false
	}

	// Ensure the URL host is "github.com"
	if u.Host != "github.com" {
		return false
	}

	// Ensure there are at least two path segments (username and repository name)
	path := strings.TrimPrefix(u.Path, "/")
	pathSegments := strings.Split(path, "/")
	if len(pathSegments) < 2 {
		return false
	}

	// Ensure the path segments are valid
	for _, segment := range pathSegments {
		if segment == "" {
			return false
		}
	}

	return true
}
