package rules

import (
	"testing"

	"github.com/lephuocmy668/vulnerability-scanner/domain"
)

func TestMatch(t *testing.T) {
	rule := NewHardcodedSecret("test_rule")

	type testCase struct {
		content  string
		expected []domain.Vulnerability
	}

	testCases := []testCase{
		{
			content:  "public_key = '12345'\n",
			expected: []domain.Vulnerability{domain.NewVulnerability(rule, "test.go", 1, domain.High, hardcodedSecretErrorDescription)},
		},
		{
			content:  "publicx_key='12345'\npublic_key='12345'",
			expected: []domain.Vulnerability{domain.NewVulnerability(rule, "test.go", 2, domain.High, hardcodedSecretErrorDescription)},
		},
		{
			content:  "private_key = '12345'\n",
			expected: []domain.Vulnerability{domain.NewVulnerability(rule, "test.go", 1, domain.High, hardcodedSecretErrorDescription)},
		},
		{
			content:  "prisvate_key='12345'\nprivate_key='12345'",
			expected: []domain.Vulnerability{domain.NewVulnerability(rule, "test.go", 2, domain.High, hardcodedSecretErrorDescription)},
		},
		{
			content:  "",
			expected: nil,
		},
		{
			content:  "foo = 'bar'",
			expected: nil,
		},
	}

	for _, tc := range testCases {
		result, err := rule.Match("test.go", &tc.content)
		if err != nil {
			t.Errorf("unexpected error: %v", err)
		}
		if len(result) != len(tc.expected) {
			t.Errorf("expected %d findings, but got %d", len(tc.expected), len(result))
		}
		for i, v := range result {
			if v.Location.Path != tc.expected[i].Location.Path ||
				v.Location.Begin.Line != tc.expected[i].Location.Begin.Line ||
				v.Metadata.Severity != tc.expected[i].Metadata.Severity ||
				v.Metadata.Description != tc.expected[i].Metadata.Description {
				t.Errorf("expected %+v, but got %+v", tc.expected[i], v)
			}
		}
	}
}

func TestID(t *testing.T) {
	rule := NewHardcodedSecret("test_rule")
	if rule.ID() != "test_rule" {
		t.Errorf("expected id is 'test_rule', but got '%s'", rule.ID())
	}
}

func TestType(t *testing.T) {
	rule := NewHardcodedSecret("test_rule")
	expectedType := domain.SAST

	if rule.Type() != expectedType {
		t.Errorf("Expected rule type %s, but got %s", expectedType, rule.Type())
	}
}
