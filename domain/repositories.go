package domain

import "context"

// SourceCodeRepository represents repository of code
type SourceCodeRepository interface {
	// GetContents can return either the metadata of a single file or
	// the metadata of all the files or subdirectories of a directory
	GetContents(ctx context.Context, owner, repo, path string) ([]GitContent, error)

	// GetContent returns the content of the file
	// TODO: implement catching for this method
	GetContent(ctx context.Context, owner, repo, path string) (*string, error)
}

// TaskRepository represents repository of Task
type TaskRepository interface {
	// Create saves task into db
	Create(task ScanningTask) (*ScanningTask, error)

	// FindOne retrieves the ScanningTask base on task id
	FindOne(id string) (*ScanningTask, error)

	// FindAll retrieves the ScanningTasks base on filter criterias
	FindAll(request GetTasksRequest) ([]ScanningTask, error)

	// UpdateStatus updates the status of ScanningTask
	UpdateStatus(id string, status string) (*ScanningTask, error)

	// UpdateFindingsAndStatus updates the findings and status of ScanningTask
	UpdateFindingsAndStatus(id string, findings []Vulnerability, status string) (*ScanningTask, error)

	// MarkTaskAsFailed updates task status to be failed and add error detail
	MarkTaskAsFailed(id string, findings []Vulnerability, err error) error
}
