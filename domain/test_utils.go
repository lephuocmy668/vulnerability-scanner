package domain

import (
	"context"

	"github.com/stretchr/testify/mock"
)

type mockRule struct {
	mock.Mock
}

func (m *mockRule) Type() string {
	args := m.Called()
	return args.String(0)
}

func (m *mockRule) ID() string {
	args := m.Called()
	return args.String(0)
}

func (m *mockRule) Match(fileContext string, fileContent *string) ([]Vulnerability, error) {
	args := m.Called(fileContext, fileContent)
	return args.Get(0).([]Vulnerability), args.Error(1)
}

type mockSourceCodeRepo struct {
	mock.Mock
}

func (m *mockSourceCodeRepo) GetContents(ctx context.Context, owner, repo, path string) ([]GitContent, error) {
	args := m.Called(ctx, owner, repo, path)
	return args.Get(0).([]GitContent), args.Error(1)
}

func (m *mockSourceCodeRepo) GetContent(ctx context.Context, owner, repo, path string) (*string, error) {
	args := m.Called(ctx, owner, repo, path)
	return args.Get(0).(*string), args.Error(1)
}

type mockTaskRepo struct {
	mock.Mock
}

func (m *mockTaskRepo) Create(task ScanningTask) (result *ScanningTask, err error) {
	args := m.Called(task)
	return args.Get(0).(*ScanningTask), args.Error(1)
}

func (m *mockTaskRepo) FindOne(id string) (*ScanningTask, error) {
	args := m.Called(id)
	return args.Get(0).(*ScanningTask), args.Error(1)
}

func (m *mockTaskRepo) FindAll(request GetTasksRequest) ([]ScanningTask, error) {
	args := m.Called(request)
	return args.Get(0).([]ScanningTask), args.Error(1)
}

func (m *mockTaskRepo) UpdateStatus(id string, status string) (*ScanningTask, error) {
	args := m.Called(id, status)
	return args.Get(0).(*ScanningTask), args.Error(1)
}

func (m *mockTaskRepo) UpdateFindingsAndStatus(id string, findings []Vulnerability, status string) (*ScanningTask, error) {
	args := m.Called(id, findings, status)
	return args.Get(0).(*ScanningTask), args.Error(1)
}

func (m *mockTaskRepo) MarkTaskAsFailed(id string, findings []Vulnerability, err error) error {
	args := m.Called(id, findings, err)
	return args.Error(0)
}

type mockMessagePublisher struct {
	mock.Mock
}

func (m *mockMessagePublisher) Publish(topic string, message string) error {
	args := m.Called(topic, message)
	return args.Error(0)
}

type mockLogger struct {
	mock.Mock
}

func (m *mockLogger) Log(keyvals ...interface{}) error {
	args := m.Called(keyvals)
	return args.Error(0)
}
