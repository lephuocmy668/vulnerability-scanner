package domain

import "time"

// GetTasksRequest is the input of GetTasks metod
type GetTasksRequest struct {
	Status           string `json:"status"`
	RepositoryName   string `json:"repository_name"`
	OrderByField     string `json:"order_by_field"`
	OrderByDirection string `json:"order_by_direction"`
}

// CreateTaskRequest is the input of CreateTask method
type CreateTaskRequest struct {
	RepositoryName string `json:"repository_name"`
	RepositoryURL  string `json:"repository_url"`
}

// ScanningTask is read model for scanning item.
type ScanningTask struct {
	ID             string          `json:"id"`
	Status         string          `json:"status"`
	RepositoryName string          `json:"repository_name"`
	RepositoryURL  string          `json:"repository_url"`
	Findings       []Vulnerability `json:"findings"`
	CreatedAt      *time.Time      `json:"created_at"`
	StartedAt      *time.Time      `json:"started_at"`
	CompletedAt    *time.Time      `json:"completed_at"`
	Error          string          `json:"error"`
}

// Vulnerability is read model for a vulnerability
type Vulnerability struct {
	Type     string                `json:"type"`
	RuleID   string                `json:"rule_id"`
	Location FileLocation          `json:"location"`
	Metadata VulnerabilityMetadata `json:"metadata"`
}

// NewVulnerability returns a new object of Vulnerability.
func NewVulnerability(rule Rule, fileContext string, line int, severity, description string) Vulnerability {
	return Vulnerability{
		Type:   rule.Type(),
		RuleID: rule.ID(),
		Location: FileLocation{
			Path: fileContext,
			Begin: FileLocationPoint{
				Line: line,
			},
		},
		Metadata: VulnerabilityMetadata{
			Description: description,
			Severity:    severity,
		},
	}
}

// VulnerabilityMetadata is read model for vulnerability metadata
type VulnerabilityMetadata struct {
	Description string `json:"description"`
	Severity    string `json:"severity"`
}

// FileLocation points out the file location of the vulnerability
type FileLocation struct {
	Path  string            `json:"path"`
	Begin FileLocationPoint `json:"begin"`
}

// FileLocationPoint indicates the starting point or ending point in the file
type FileLocationPoint struct {
	Line int `json:"line"`
}

// GitContent represents a file or directory in a github repository.
type GitContent struct {
	Path string
	Type string
}
