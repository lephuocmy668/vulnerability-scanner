// The http package provides HTTP transport implementations for the scanner service.
package http

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"

	"github.com/gorilla/mux"

	kitlog "github.com/go-kit/kit/log"
	kittransport "github.com/go-kit/kit/transport"
	kithttp "github.com/go-kit/kit/transport/http"

	domain "github.com/lephuocmy668/vulnerability-scanner/domain"
	endpoint "github.com/lephuocmy668/vulnerability-scanner/endpoint"
)

// MakeHandler returns a handler for the scanner service that exposes HTTP endpoints for adding and retrieving scanning tasks.
// The function uses the Gorilla mux router and the Go kit HTTP transport package to create the endpoints.
func MakeHandler(sc domain.ScannerService, logger kitlog.Logger) http.Handler {
	r := mux.NewRouter()

	opts := []kithttp.ServerOption{
		kithttp.ServerErrorHandler(kittransport.NewLogErrorHandler(logger)),
		kithttp.ServerErrorEncoder(encodeError),
	}

	r.Handle("/vulnerability-scanner/v1/tasks", kithttp.NewServer(
		endpoint.MakeAddTaskEndpoint(sc),
		DecodeAddTask,
		EncodeResponse,
		opts...,
	)).Methods("POST")

	r.Handle("/vulnerability-scanner/v1/tasks", kithttp.NewServer(
		endpoint.MakeGetTasksEndpoint(sc),
		DecodeGetTasks,
		EncodeResponse,
		opts...,
	)).Methods("GET")

	r.Handle("/vulnerability-scanner/v1/tasks/{id}", kithttp.NewServer(
		endpoint.MakeGetTaskDetailEndpoint(sc),
		DecodeGetTaskDetail,
		EncodeResponse,
		opts...,
	)).Methods("GET")

	return r
}

// DecodeAddTask decodes an HTTP request body into a CreateTaskRequest object,
// which is used to create a new scanning task.
func DecodeAddTask(_ context.Context, r *http.Request) (interface{}, error) {
	var body domain.CreateTaskRequest
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}

	return body, nil
}

// DecodeGetTasks extracts the status query parameter from an HTTP request
// and returns a GetTasksRequest object, which is used to retrieve a list
// of scanning tasks with a specified status.
func DecodeGetTasks(_ context.Context, r *http.Request) (interface{}, error) {
	status := r.URL.Query().Get("status")
	return domain.GetTasksRequest{Status: status}, nil
}

// DecodeGetTaskDetail extracts the task ID from an HTTP request and returns
// a GetTaskDetailRequest object, which is used to retrieve the details of a
// scanning task with the specified ID.
func DecodeGetTaskDetail(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, errors.New("bad route")
	}
	return endpoint.GetTaskDetailRequest{ID: id}, nil
}

// EncodeResponse encodes a response into JSON format and sets the Content-Type header
// to application/json. If the response is an error, it uses the encodeError function
// to encode the error message and set an appropriate HTTP status code.
func EncodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

type errorer interface {
	error() error
}

// encodes errors returned from the business-logic layer into JSON format and sets an
// appropriate HTTP status code based on the type of error. The function is used by
// the EncodeResponse function to encode errors.
func encodeError(_ context.Context, err error, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	switch err {
	case domain.ErrInvalidTaskID:
		w.WriteHeader(http.StatusBadRequest)
	case domain.ErrInvalidRepoURL:
		w.WriteHeader(http.StatusBadRequest)
	case domain.ErrTaskNotFound:
		w.WriteHeader(http.StatusNotFound)
	case domain.ErrInternalServer:
		w.WriteHeader(http.StatusInternalServerError)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}
	json.NewEncoder(w).Encode(map[string]interface{}{
		"error": err.Error(),
	})
}
